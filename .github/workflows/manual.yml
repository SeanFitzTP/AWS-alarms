# This is a basic workflow that is manually triggered

name: Manual workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      name:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Person to greet'
        # Default value if no value is explicitly provided
        default: 'World'
        # Input has to be provided for the workflow to run
        required: true

env:
  EPHEMERAL: pr-${{ github.event.pull_request.number }}
  GRAAL_VM_VERSION: 21.0.0
  JAVA_VERSION: java11
  NODE_VERSION: 12.18.4
  MVN_VERSION: 3.6.3
  AWS_REGION: us-west-2
  S3_ARTIFACT_BUCKET: test-github-action-artifacts
  VERIFIED_ARTIFACT_NAME: ${{ github.event.repository.name }}/pr-${{ github.event.pull_request.number }}/${{ github.event.pull_request.head.sha }}-verified

jobs:
  branch-up-to-date:
    name: 'Is branch up-to-date?'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest
        uses: actions/checkout@v2

      - name: Checkout branches
        run: |
          git fetch --no-tags origin +refs/heads/*:refs/remotes/origin/*
      - name: Verify branch is up-to-date with master branch
        run: |
          if [ $(git log origin/${{ github.head_ref }}..origin/master --oneline | wc -l) -ne 0 ]
          then
            echo "Branch is not up-to-date with master branch!"
            exit 1
          fi
      - name: Comment on failure
        if: failure()
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            Your branch is not up-to-date with `master`! Please rebase before proceeding.

  ci:
    name: 'CI'
    runs-on: ubuntu-latest
    needs: branch-up-to-date
    steps:
      - name: Checkout latest
        uses: actions/checkout@v2

      - name: Set up maven
        uses: stCarolas/setup-maven@v4
        with:
          maven-version: ${{ env.MVN_VERSION }}

      - uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Setup GraalVM Community Edition
        uses: rinx/setup-graalvm-ce@v0.0.5
        with:
          graalvm-version: ${{ env.GRAAL_VM_VERSION }}
          java-version: ${{ env.JAVA_VERSION }}
          native-image: "true"

      - name: Setup CDK
        run: npm install -g aws-cdk

      - name: Print SDK versions
        run: |
          java -version
          mvn -version
          node -v
          npx cdk --version

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # The build requires AWS Credentials to pull secrets
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build
        run: make build
        env:
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Deploy ephemeral
        run: make deploy
        env:
          ENV_NAME: ${{ env.EPHEMERAL }}

      - name: Test
        run: make test
        env:
          ENV_NAME: ${{ env.EPHEMERAL }}

      - name: Upload artifact to s3
        run: ./manageAWS.sh upload-artifact ${{ env.S3_ARTIFACT_BUCKET }} ${{ env.VERIFIED_ARTIFACT_NAME }}
      - name: Cleanup
        if: ${{ always() }}
        run: docker ps -q | xargs -n 1 -P 8 -I {} docker stop {}
